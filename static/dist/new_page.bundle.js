!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";function n(e){for(var t=0;t<e.length&&"Â "==e[t];t++);return e.substring(t)}var o;r.r(t),function(e){var t=function(){function e(){this.toc_headers_=[],this.time_to_update_toc=!0,this.prev_highlighted=0,this.FetchHeaders()}return e.prototype.FetchHeaders=function(){for(var e,t=0,r=document.querySelectorAll(".header-general");t<r.length;t++){var o=r[t],i=n(o.innerText),a="h"!=(e=o.tagName)[0]&&"H"!=e[0]?-1:parseInt(e.substring(1)),s=o.id,c=o.getBoundingClientRect().top+window.scrollY;this.toc_headers_.push({header_name:i,header_tag:a,header_id:s,header_pos:c,header_elem_link:null})}},e.prototype.RecursiveTOCCreator=function(e,t,n){for(var o=null,i=t;i<this.toc_headers_.length;i++){var a=this.toc_headers_[i];if(a.header_tag<n)return i;if(a.header_tag>n){var s=document.createElement("ol");s.className="toc-list",o.appendChild(s),i=this.RecursiveTOCCreator(s,i,a.header_tag),i--}else{var c=r(a);a.header_elem_link=c.firstChild,e.appendChild(c),o=c}}return i},e.prototype.CreateTOCList=function(){var e=document.querySelector(".toc-list");null!=e&&(this.RecursiveTOCCreator(e,0,this.toc_headers_[0].header_tag),this.InstallTOCEventHandlers())},e.prototype.InstallTOCEventHandlers=function(){var e=this;window.addEventListener("scroll",function(t){var r=window.scrollY;e.time_to_update_toc&&(this.window.requestAnimationFrame(function(){e.time_to_update_toc=!0;var t=e.GetCurrentActiveTOCItem(r);e.HighlightActiveItem(t),console.log(r,t),console.log(e.toc_headers_)}),e.time_to_update_toc=!1)})},e.prototype.HighlightActiveItem=function(e){this.toc_headers_[this.prev_highlighted].header_elem_link.className="toc-item-link",this.toc_headers_[e].header_elem_link.className="toc-item-link toc-active-item",this.prev_highlighted=e},e.prototype.GetCurrentActiveTOCItem=function(e){if(e<this.toc_headers_[0].header_pos)return 0;for(var t=0;t<this.toc_headers_.length&&t!=this.toc_headers_.length-1;t++)if(this.toc_headers_[t].header_pos<=e&&e<this.toc_headers_[t+1].header_pos)return e-this.toc_headers_[t].header_pos<this.toc_headers_[t+1].header_pos-e?t:t+1;return t},e}();function r(e){var t=document.createElement("li");t.className="toc-list-item";var r=document.createElement("a");return r.href="#"+e.header_id+"-hash",r.className="toc-item-link toc-item-h"+e.header_tag,r.textContent=e.header_name,t.appendChild(r),t}e.BuildTableOfContents=function(){var e=new t;return e.CreateTOCList(),e}}(o||(o={})),window.onload=function(){o.BuildTableOfContents()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,